"use client"
import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Textarea } from "@/components/ui/textarea"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { 
  Copy, 
  ExternalLink, 
  CheckCircle2, 
  Download,
  Zap,
  Info,
  ArrowRight
} from "lucide-react"

interface PimsTransferProps {
  appointmentData: any
}

const PIMS_SYSTEMS = [
  { 
    name: "ezyVet", 
    url: "https://app.ezyvet.com",
    instructions: "Navigate to the patient record â†’ Medical History â†’ Add New Consultation",
    format: "structured"
  },
  { 
    name: "AVImark", 
    url: "https://avimark.com",
    instructions: "Open patient â†’ Medical Records â†’ New Entry â†’ Paste in SOAP section",
    format: "simple"
  },
  { 
    name: "ImproMed Infinity", 
    url: "https://impromed.com",
    instructions: "Patient Chart â†’ Progress Notes â†’ New Note â†’ Paste content",
    format: "simple"
  },
  { 
    name: "VetBlue", 
    url: "https://vetblue.com",
    instructions: "Patient Dashboard â†’ Medical Records â†’ Add Visit Notes",
    format: "structured"
  },
  { 
    name: "Pulse Veterinary", 
    url: "https://pulse.vet",
    instructions: "Patient Profile â†’ Clinical Notes â†’ New Entry",
    format: "simple"
  },
  { 
    name: "Vetspire", 
    url: "https://vetspire.com",
    instructions: "Patient â†’ Medical History â†’ Add Consultation Notes",
    format: "structured"
  },
  { 
    name: "Other PIMS", 
    url: "",
    instructions: "Copy the formatted notes and paste into your PIMS system",
    format: "simple"
  }
]

export function PimsTransfer({ appointmentData }: PimsTransferProps) {
  const [selectedPims, setSelectedPims] = useState(PIMS_SYSTEMS[0])
  const [copied, setCopied] = useState(false)
  const [showInstructions, setShowInstructions] = useState(false)

  const formatForPims = (format: string) => {
    const baseData = {
      patient: appointmentData.patient_name,
      owner: appointmentData.owner_name,
      date: new Date(appointmentData.created_at).toLocaleDateString(),
      appointmentType: appointmentData.appointment_type,
      soap: appointmentData.soap_note,
      summary: appointmentData.client_summary
    }

    if (format === "structured") {
      return `PATIENT: ${baseData.patient}
OWNER: ${baseData.owner}
DATE: ${baseData.date}
APPOINTMENT TYPE: ${baseData.appointmentType}

SOAP NOTES:
${baseData.soap || 'Not generated'}

CLIENT SUMMARY:
${baseData.summary || 'Not generated'}

--- Generated by VetScribe ---`
    } else {
      return baseData.soap || 'SOAP notes not generated yet'
    }
  }

  const copyToClipboard = async () => {
    const formattedText = formatForPims(selectedPims.format)
    try {
      await navigator.clipboard.writeText(formattedText)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (error) {
      console.error('Failed to copy:', error)
      alert('Failed to copy to clipboard. Please copy manually.')
    }
  }

  const openPimsAndCopy = async () => {
    await copyToClipboard()
    if (selectedPims.url) {
      window.open(selectedPims.url, '_blank')
    }
    setShowInstructions(true)
  }

  const downloadAsFile = () => {
    const formattedText = formatForPims(selectedPims.format)
    const blob = new Blob([formattedText], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${appointmentData.patient_name}_${new Date().toISOString().split('T')[0]}_notes.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  if (!appointmentData?.soap_note) {
    return (
      <Card className="mt-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            ðŸ”— Transfer to PIMS
            <Badge variant="outline">Ready to Use</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Alert>
            <Info className="h-4 w-4" />
            <AlertDescription>
              Generate SOAP notes first to enable PIMS transfer
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          ðŸ”— Transfer to PIMS
          <Badge className="bg-green-100 text-green-800">1-Click Transfer</Badge>
        </CardTitle>
        <p className="text-sm text-muted-foreground">
          Copy your notes and transfer them to your practice management system in seconds
        </p>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* PIMS Selection */}
        <div>
          <label className="text-sm font-medium mb-2 block">
            Select your PIMS:
          </label>
          <Select 
            value={selectedPims.name} 
            onValueChange={(value) => setSelectedPims(PIMS_SYSTEMS.find(p => p.name === value) || PIMS_SYSTEMS[0])}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {PIMS_SYSTEMS.map(system => (
                <SelectItem key={system.name} value={system.name}>
                  {system.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Transfer Actions */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          <Button 
            onClick={openPimsAndCopy}
            className="bg-blue-600 hover:bg-blue-700"
          >
            <Zap className="h-4 w-4 mr-2" />
            1-Click Transfer
          </Button>
          
          <Button 
            onClick={copyToClipboard}
            variant="outline"
          >
            {copied ? (
              <>
                <CheckCircle2 className="h-4 w-4 mr-2" />
                Copied!
              </>
            ) : (
              <>
                <Copy className="h-4 w-4 mr-2" />
                Copy Notes
              </>
            )}
          </Button>
          
          <Button 
            onClick={downloadAsFile}
            variant="outline"
          >
            <Download className="h-4 w-4 mr-2" />
            Download
          </Button>
        </div>

        {/* Preview */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h4 className="font-medium mb-2">Preview ({selectedPims.format} format):</h4>
          <Textarea
            value={formatForPims(selectedPims.format)}
            readOnly
            rows={8}
            className="font-mono text-sm"
          />
        </div>

        {/* Instructions Dialog */}
        <Dialog open={showInstructions} onOpenChange={setShowInstructions}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <ArrowRight className="h-5 w-5" />
                Next Steps for {selectedPims.name}
              </DialogTitle>
            </DialogHeader>
            
            <div className="space-y-4">
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center gap-2 mb-2">
                  <CheckCircle2 className="h-5 w-5 text-green-600" />
                  <span className="font-medium text-green-900">Notes Copied to Clipboard!</span>
                </div>
                <p className="text-sm text-green-700">
                  Your formatted notes are ready to paste into {selectedPims.name}.
                </p>
              </div>

              <div className="space-y-3">
                <h4 className="font-medium">How to complete the transfer:</h4>
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <ol className="list-decimal list-inside space-y-2 text-sm">
                    <li>Go to your {selectedPims.name} system {selectedPims.url && '(opened in new tab)'}</li>
                    <li>Navigate to: <strong>{selectedPims.instructions}</strong></li>
                    <li>Paste the notes (Ctrl+V or Cmd+V)</li>
                    <li>Save the record in your PIMS</li>
                  </ol>
                </div>
              </div>

              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  <strong>Pro Tip:</strong> The notes are formatted specifically for {selectedPims.name}. 
                  You can always re-copy or download if needed.
                </AlertDescription>
              </Alert>
            </div>
          </DialogContent>
        </Dialog>

        {/* Future Browser Extension Notice */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-start gap-3">
            <Info className="h-5 w-5 text-blue-600 mt-0.5" />
            <div>
              <h4 className="font-medium text-blue-900 mb-1">Coming Soon: Browser Extension</h4>
              <p className="text-sm text-blue-700">
                We're building a browser extension for true 1-click transfer that automatically fills 
                your PIMS forms. For now, copy-paste works perfectly for all major PIMS systems.
              </p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
